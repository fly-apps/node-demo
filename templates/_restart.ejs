<% if (options.redis) { -%>
// common reconnect logic for <%= options.mongodb ? 'mongodb' : 'postgres' %>, redis clients
const reconnect = {
  client: null<% if (options.typescript) { %> as any<% } %>,
<% } else { -%>
// <%= options.mongodb ? 'mongodb' : 'postgres' %> client
const <%= options.mongodb ? 'mongo' : 'postgres' %> = {
<% } -%>
  interval: null<% if (options.typescript) { %> as NodeJS.Timer | null<% } %>,
<% if (options.typescript && options.redis) { -%>
  connect: null as Function | null,
  disconnect: null as Function | null,
<% } -%>

  reconnect() {
    if (this.interval) return;

    this.interval = setInterval(() => {
      this.tryConnect().catch(console.log)
    }, 1000);
  },

  async tryConnect(reconnect = false) {
    if (this.client || !this.connect || !this.disconnect) return;

    try {
      await this.connect();

      if (this.interval) {
        clearInterval(this.interval);
        this.interval = null;
      }
    } catch (error) {
      console.error(error);
      this.disconnect();
      if (reconnect) this.reconnect();
      throw(error);
    }
  }<% if (!options.redis) { -%>,
<% } else { %>
}

// redis subscriber
const subscriber = {
  ...reconnect,
<% if (options.typescript) { -%>
  client: null as redis.RedisClientType | null,

<% } -%>
  async connect() {
    this.client = redis.createClient({url: process.env.REDIS_URL});

    await this.client.connect();

    // Forward messages from redis to all websocket clients
    this.client.subscribe('welcome:counter', (message<% if (options.typescript) { %> : string<% } %>) => {
<% if (options.htmx) { -%>
      message = `<div id="counter" hx-swap-oob="innerHTML">${message}</div>`
<% } -%>

      wss.clients.forEach(client => {
        try { client.send(message) } catch {};
      });
    }),

    this.client.on('error', (err<% if (options.typescript) { %>: object<% } %>) => {
      console.error('Redis Server Error', err);
      this.disconnect();
      this.reconnect();
    })
  },

  disconnect() {
    if (this.client) {
      this.client.quit();
      this.client = null;
    }
  }
};

// redis publisher
const publisher = {
  ...reconnect,
<% if (options.typescript) { -%>
  client: null as redis.RedisClientType | null,
<% } -%>

  async connect() {
    this.client = redis.createClient({url: process.env.REDIS_URL});

    await this.client.connect();
  },

  disconnect() {
    if (this.client) {
      this.client.quit();
      this.client = null;
    }
  }
}

// <%= options.mongodb ? 'mongodb' : 'postgresdb' %> client
const <%= options.mongodb ? 'mongodb' : 'postgres' %> = {
  ...reconnect,
<% } -%>
<% if (options.typescript) { -%>
  client: null as <%= options.mongodb ? 'mongodb.MongoClient' : 'pg.Client' %> | null,
<% if (options.mongodb) { -%>
  db: null as mongodb.Db | null,
<% } -%>
<% } -%>

  async connect() {
<% if (options.mongodb) { -%>
    this.client = new mongodb.MongoClient(dbURL.toString());
<% } else { -%>
    this.client = new pg.Client({connectionString: process.env.DATABASE_URL});
<% } -%>

    await this.client.connect();
<% if (options.mongodb) { -%>

    this.db = this.client.db(dbName);

<% if (options.ws) { -%>
    // Forward changes to all websocket clients
    const changestream = this.db.watch();
    changestream.on('change', change => {
      let update = { count: 0 }<% if (options.typescript) {%> as Welcome<% } %>;

      if (change.operationType === 'insert') {
        update = change.fullDocument<% if (options.typescript) {%> as Welcome<% } %>;
      } else if (change.operationType === 'update') {
        update = change.updateDescription.updatedFields<% if (options.typescript) {%> as Welcome<% } %>;
      }

      if (!update.count) return;

      count = update.count;

<% if (options.htmx) { -%>
      const message = `<div id="counter" hx-swap-oob="innerHTML">${update.count}</div>`;

<% } -%>
      wss.clients.forEach(client => {
        try { client.send(<% if (options.htmx) { %>message<% } else { %>count.toString()<% } %>) } catch {};
      });
    });
<% } -%>
<% } -%>

    this.client.on('<%= options.mongodb ? 'topologyClosed' : 'end' %>', event => {
      this.disconnect();
      this.reconnect();
    });
  },

  disconnect() {
    if (this.client) {
      this.client.<%= options.mongodb ? 'close' : 'end' %>();
      this.client = null;
<% if (options.mongodb) { -%>
      this.db = null;
<% } -%>
    }
  }
}
