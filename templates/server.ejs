<% if (Object.keys(imports).length > 0) { -%>
<% for (const [name, pkg] of Object.entries(imports)) { -%>
<% if (options.typescript && !options.esm && !options.bun && !name.includes('{')) { -%>
import * as <%= name %> from '<%= pkg %>'
<% } else if (options.typescript || options.esm) { -%>
import <%= name %> from '<%= pkg %>'
<% } else { -%>
const <%= name %> = require('<%= pkg %>')
<% } -%>
<% } -%>

<% } -%>
<% if (options.mongodb) { -%>
// determine mongodb name
const dbURL = new URL(process.env.DATABASE_URL || 'mongodb://localhost:27017/demo')
const dbName = dbURL.pathname.replace(/^\/*/, '');
dbURL.pathname = '/';

<% if (options.typescript && options.ws) { -%>
// define document data type
class Welcome {
  constructor(public count: number, public _id?: mongodb.ObjectId) {}
}

<% } -%>
<% } -%>
<% if (options.express) { -%>
<% if (options.ws) { -%>
// set up express and web socket
const { app, getWss } = expressWs(express())
const wss = getWss()
<% } else { -%>
// set up express web server
const app = express()
<% } -%>

// set up static content<% if (options.mustache) { %>and mustache views<% } else if (options.ejs) { %> and ejs views<% } %>
app.use(express.static('public'))
<% if (options.mustache) { -%>
app.engine('mustache', mustacheExpress())
app.set('view engine', 'mustache')
<% } else if (options.ejs) { -%>
app.set('view engine', 'ejs')
<% } -%>

<% } else if (!options.bun) { -%>
// set up web server
const server = http.createServer(listener)
<% if (options.ws) { -%>
const wss = new WebSocketServer({ noServer: true })
<% } -%>

<% } else if (options.ws) { -%>
// list of active websocket sessions
const clients = new Set()

<% } -%>
<% if (options.redis || ((options.postgres || options.mongodb) && !orm)) { -%>
<%- include('_restart.ejs', { options, orm }) -%>

<% } -%>
<% if (options.prisma) { -%>
// open database
<% if (options.sqlite3) { -%>
process.env.DATABASE_URL ||= url.pathToFileURL('production.sqlite3').toString()
<% } -%>
const prisma = new PrismaClient();

<% } else if (options.drizzle) { -%>
// open database
<% if (options.sqlite3) { -%>
process.env.DATABASE_URL ||= url.pathToFileURL('production.sqlite3').toString()
const db = drizzle(new Database(new URL(process.env.DATABASE_URL).pathname))
<% } else { -%>
const pool = new Pool({ connectionString: process.env.DATABASE_URL })
const db = drizzle(pool)
<% } -%>
  
<% } else if (options.knex) { -%>
// open database
<% if (options.sqlite3) { -%>
process.env.DATABASE_URL ||= url.pathToFileURL('production.sqlite3').toString()
<% } -%>
const db = knex({
<% if (options.sqlite3) { -%>
  client: 'sqlite3',
  connection: { filename: new URL(process.env.DATABASE_URL).pathname },
  useNullAsDefault: true
<% } else { -%>
  client: 'pg',
  connection: process.env.DATABASE_URL
<% } -%>
})

<% } else if (options.sqlite3) { -%>
// open database
process.env.DATABASE_URL ||= url.pathToFileURL('production.sqlite3').toString()
const db = new <% if (!options.bun) { %>sqlite3.<% } %>Database(new URL(process.env.DATABASE_URL).pathname.slice(1))

<% } -%>
// last known count
let count = 0

<% if (options.express) { -%>
// Main page
app.get('/', async(_request, response) => {
<% } else { -%>
<% if (options.bun) { -%>
// Process requests based on pathname
<% if (options.typescript) { -%>
async function fetch(request : Request<% if (options.ws) { %>, server<% } %>) : Promise<Response> {
<% } else { -%>
async function fetch(request<% if (options.ws) { %>, server<% } %>) {
<% } -%>
  const { pathname } = new URL(request.url)

  if (pathname === '/') {
    return main(request)
<% if (options.ws) { -%>
  } else if (pathname === '/websocket') {
    if (server.upgrade(request)) return
    return new Response('Not found.', { status: 404 })
<% } -%>
  } else if (<% if (options.typescript) { %>pathname && <% } %><%= fileExists('`public${pathname}`') %>) {
    return new Response(Bun.file(`public${pathname}`))
  } else {
    return new Response('Not found.', { status: 404 })
  }
}
<% } else { -%>
// Map of file extensions to mime types
const mimeTypes<% if (options.typescript) { %> : Record<string, string><% } %> = {
  ico: 'image/x-icon',
  js: 'text/javascript',
  css: 'text/css',
  svg: 'image/svg+xml'
}

// Process requests based on pathname
async function listener(request<% if (options.typescript) { %> : http.IncomingMessage<% } %>, response<% if (options.typescript) { %> : http.ServerResponse<% } %>) {
  const { pathname } = url.parse(request.url<% if (options.typescript) { %> as string<% } %>)

  if (pathname === '/') {
    await main(request, response)
  } else if (<% if (options.typescript) { %>pathname && <% } %><%= fileExists('`public${pathname}`') %>) {
    try {
      const contents = <%- fileRead('`public${pathname}`') %>
      const mimeType = mimeTypes[pathname.split('.').pop()<% if (options.typescript) { %> as string<% } %>] || 'application/octet-stream'

      response.writeHead(200, { 'Content-Type': mimeType })
      response.write(contents, 'utf-8')
    } catch (error) {
      response.writeHead(500, { 'Content-Type': 'text/plain' })
      response.write(error + '\n')
    }

    response.end()
  } else {
    response.writeHead(404)
    response.end('Not found.')
  }
}
<% } -%>

// Main page
<% if (options.bun) { -%>
async function main(_request<% if (options.typescript) { %> : Request<% } %>)<% if (options.typescript) { %> : Promise<Response><% } %> {
<% } else { -%>
async function main(_request<% if (options.typescript) { %> : http.IncomingMessage<% } %>, response<% if (options.typescript) { %> : http.ServerResponse<% } %>) {
<% } -%>
<% } -%>
<% if (options.ws) { -%>
  const oldCount = count

<% } -%>
<%- include('_update.ejs', { options, fileRead, fileWrite }) -%>

<% if (options.ws && !options.mongodb) { -%>
  if (oldCount !== count) {
<% if (options.redis) { -%>
    // publish new count on redis
    publisher.client?.publish('welcome:counter', count.toString())
<% } else { -%>
    // publish new count to all websocket clients
<% if (options.htmx) { -%>
    const message = `<div id="counter" hx-swap-oob="innerHTML">${count}</div>`
<% } -%>
    for (const client of <% if (!options.bun || options.express) { %>wss.<% } %>clients) {
      try { client.send(<% if (options.htmx) { %>message<% } else { %>count.toString()<% } %>) } catch {}
    }
<% } -%>
  }

<% } -%>
  // render HTML response
<% if (options.express) { -%>
<% if (options.ejs || options.mustache) { -%>
  response.render('index', { count });
<% } else { -%>
  try {
    const content = fs.readFileSync('views/index.<%= templateExtension %>', 'utf-8')
      .replace('<%= count %>', count.toString())
    response.set('Content-Type', 'text/html')
    response.send(content)
  } catch (error) {
    response.send()
  }
<% } -%>
<% } else { -%>
  try {
    let contents = <%- fileRead(`'views/index.${templateExtension}'`) %>
<% if (options.mustache) { -%>
    contents = mustache.render(contents, { count })
<% } else if (options.ejs) { -%>
    contents = ejs.render(contents, { count })
<% } else { -%>
    contents = contents.replace('<%= count %>', count.toString())
<% } -%>

<% if (options.bun) { -%>
    return new Response(contents, { status: 200, headers: { 'Content-Type': 'text/html' } })
  } catch (error) {
    return new Response(error + '\n', { status: 500, headers: { 'Content-Type': 'text/plain' } })
  }
<% } else { -%>
    response.writeHead(200, { 'Content-Type': 'text/html' })
    response.write(contents, 'utf-8')
  } catch (error) {
    response.writeHead(500, { 'Content-Type': 'text/plain' })
    response.write(error + '\n')
  }

  response.end()
<% } -%>
<% } -%>
}<% if (options.express) { %>)<% } %>
<% if (options.ws) { -%>

// Define web socket<% if (options.express) { %> route<% } %>
<% if (options.express) { -%>
app.ws('/websocket', (ws) => {
<% } else if (options.bun) { -%>
// Define web socket
const websocket = {
  open(ws) {
    clients.add(ws)

    // update client on a best effort basis
    if (count) try { ws.send(count.toString()) } catch {}
  },

  close(ws) {
    clients.delete(ws)
  },

  // We don’t expect any messages on websocket, but log any ones we do get.
  message(ws, message) {
    console.log(message)
  }
}
<% } else { -%>
server.on('upgrade', (request, socket, head) => {
  const { pathname } = url.parse(request.url<% if (options.typescript) { %> as string<% } %>)

  if (pathname === '/websocket') {
    wss.handleUpgrade(request, socket, head, (ws) => {
      wss.emit('connection', ws, request)
    })
  } else {
    socket.destroy()
  }
})

wss.on('connection', (ws) => {
<% } -%>
<% if (!options.bun || options.express) { -%>
  // update client on a best effort basis
  if (count) try { ws.send(count.toString()) } catch {}

  // We don’t expect any messages on websocket, but log any ones we do get.
  ws.on('message', console.log)
})
<% } -%>
<% } -%>

<%- include('_startup.ejs', { options, orm }) -%>
